library(stringr)
str_replace_all(title, "[\r\n]" , "")
price_html <- html_nodes(url, 'span#priceblock_ourprice')
price <- html_text(price_html)
str_replace_all(price, "[\r\n]" , "")
head(price)
desc_html <- html_nodes(url, 'div#productDescription')
desc <- html_text(desc_html)
desc <- str_replace_all(desc, "[\r\n\t]" , "")
desc <- str_trim(desc)
head(desc)
install.packages("haven")
library(haven)
data <- read_sav("https://mmi.psycho.unibas.ch/r-toolbox/data/Cars.sav") #import data
install.packages("sjlabelled")
library(sjlabelled)
get_label(data)
get_labels(data)
install.packages("tibble")
install.packages("tibble")
library(tibble)
simple_codebook <- enframe(get_label(data))
library(sjlabelled)
simple_codebook <- enframe(get_label(data))
`colnames(simple_codebook) <- c("var_id", "item_text")
}
simple_codebook
library(datasets)
data("presidents")
data
presidents
mean("presidents", "Qtr1")
sort(presidents)
median(presidents)
mean(presidents)
library(shiny)
install.packages("shiny")
library(shiny)
library(dplyr)
install.packages("DT")
install.packages("ggplot2")
install.packages("reshape2")
install.packages("scales")
library(DT)
library(ggplot2)
library(reshape2)
library(scales)
options(scipen = 999)
ui <- fluidPage()
ui <- fluidPage()
install.packages("devtools")
if(!require("devtools"))
install.packages("devtools")
devtools::install_github("rstudio/shinyapps")
library(shiny)
sliderInput(inputId = "num", label="Choose a number", value=10, min=1, max=50)
install.packages("rmarkdown")
set.seed(1)
x <- rnorm(100)
mean(x)
set.seed(10)
x <- rnorm(100)
mean(x)
set.seed(10)
x <- rnorm(100)
mean(x)
time <-format(Sys.time(), "%a %b %d %X %Y")
summary(cars)
plot(cars)
tinytex::install_tinytex()
plot(cars)
plot(cars)
summary(cars)
summary(cars)
library(easyGgplot2)
install.packages("easyGgplot2", "kassambara")
norm <- rnorm(100, mean = 0, sd = 1)
print(dataframe)
install.packages("dataframe")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("choroplethr")
install.packages("choroplethrMaps")
install.packages("openintro")
install.packages("fiftystater")
install.packages("colorplaner")
df.raw <- read.csv(file = 'vehicles.csv', na.strings = '..')
install.packages("scatterplotMatrix")
install.packages("scatterPlotMatrix")
install.packages("par")
install.packages("hist")
install.packages("ggplot")
install.packages("Histogram")
install.packages("histogram")
hist(CO2)
hist(2)
data("AirPassengers")
data("BJsales")
data("Harman23.cor")
install.packages("dataMaid")
install.packages("pander")
install.packages("dataMaid")
install.packages("haven")
install.packages("sjlabelled")
install.packages("enframe")
install.packages("tibble")
install.packages("codebook")
install.packages("rio")
install.packages("fiftystater")
install.packages("colorplaner")
ticketStatus <- as.data.frame(AAQ2)
AAQ2 <- read.csv("C:\\Users\\evang\\OneDrive\\Documents\\AAQ2.csv")
ticketStatus
percentage <- c(45.5, 39.5, 6.5, 2.6, 2.0, 3.9)
percentage
ticketStatus
ticketStatus
aaq2
percentage <- c(45.5, 39.5, 6.5, 2.6, 2.0, 3.9)
status <- c("Solved", "Open", "Reopened", "Deleted", "Unassigned", "Escalated")
aaq2 <- data.frame(status, percentage)
aaq2
percentage <- c(45.5, 39.5, 6.5, 2.6, 2.0, 3.9)
status <- c("Solved", "Open", "Reopened", "Deleted", "Unassigned", "Escalated")
aaq2 <- data.frame(status, percentage)
library(ggplot2)
p <- ggplot(aaq2, aes(x=status, y=percentage, fill=status)) +
geom_violin()
geom_violin()
hist(aaq2)
percentage <- c(45.5, 39.5, 6.5, 2.6, 2.0, 3.9)
status <- c("Solved", "Open", "Reopened", "Deleted", "Unassigned", "Escalated")
aaq2 <- data.frame(status, percentage)
library(tidyr)
library(ggplot2)
library(dplyr)
aaq2 %>%
gather(key="status", value="percentage")%>%
ggplot(aes(x=status, y=percentage, fill=status)) +
geom_violin()
install.packages("tidyverse")
install.packages("hrbrthemes")
install.packages("viridis")
library(tidyverse)
library(hrbrthemes)
library(viridis)
library(ggplot2)
data <- data.frame(
status = c("Solved", "Open", "Reopened", "Deleted", "Unassigned", "Escalated"),
percentage = c(45.5, 39.5, 6.5, 2.6, 2.0, 3.9)
)
data %>%
ggplot( aes(x= status, y=percentage)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha = 0.6, option="status") +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("AAQ2") +
xlab("")
library(tidyverse)
library(hrbrthemes)
library(viridis)
library(ggplot2)
data <- data.frame(
status = c("Solved", "Open", "Reopened", "Deleted", "Unassigned", "Escalated"),
percentage = c(45.5, 39.5, 6.5, 2.6, 2.0, 3.9)
)
data %>%
ggplot( aes(x= status, y=percentage)) +
geom_violin() +
scale_fill_viridis(discrete = TRUE, alpha = 0.6, option="status") +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("AAQ2") +
xlab("")
library(tidyverse)
library(hrbrthemes)
library(viridis)
library(ggplot2)
data <- data.frame(
status = c("Solved", "Open", "Reopened", "Deleted", "Unassigned", "Escalated"),
percentage = c(45.5, 39.5, 6.5, 2.6, 2.0, 3.9)
)
data %>%
ggplot( aes(x= status, y=percentage)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
library(tidyverse)
library(hrbrthemes)
library(viridis)
library(ggplot2)
data <- data.frame(
status = c("Solved", "Open", "Reopened", "Deleted", "Unassigned", "Escalated"),
percentage = c(45.5, 39.5, 6.5, 2.6, 2.0, 3.9)
)
data %>%
ggplot( aes(x= status, y=percentage)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
library(tidyverse)
library(hrbrthemes)
library(viridis)
library(ggplot2)
data <- data.frame(
status = c("Solved", "Open", "Reopened", "Deleted", "Unassigned", "Escalated"),
percentage = c(45.5, 39.5, 6.5, 2.6, 2.0, 3.9)
)
data %>%
ggplot( aes(x= percentage, y=status, fill=..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
scale_fill_viridis(name = "percentage", option = "status") +
labs(title = 'Ticket Status vs Percentage') +
theme_ipsum() +
theme(
legend.position="none",
panel.spacing = unit(0.1, "lines"),
strip.text.x = element_text(size = 8)
)
install.packages("ggridges")
library(tidyverse)
library(hrbrthemes)
library(viridis)
library(ggplot2)
library(ggridges)
data <- data.frame(
status = c("Solved", "Open", "Reopened", "Deleted", "Unassigned", "Escalated"),
percentage = c(45.5, 39.5, 6.5, 2.6, 2.0, 3.9)
)
data %>%
ggplot( aes(x= percentage, y=status, fill=..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
scale_fill_viridis(name = "percentage", option = "status") +
labs(title = 'Ticket Status vs Percentage') +
theme_ipsum() +
theme(
legend.position="none",
panel.spacing = unit(0.1, "lines"),
strip.text.x = element_text(size = 8)
)
library(tidyverse)
library(hrbrthemes)
library(viridis)
library(ggplot2)
data <- data.frame(
status = c("Solved", "Open", "Reopened", "Deleted", "Unassigned", "Escalated"),
percentage = c(45.5, 39.5, 6.5, 2.6, 2.0, 3.9)
)
data %>%
ggplot( aes(x= status, y=percentage)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha = 0.6, option="status") +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("AAQ2") +
xlab("")
library(tidyverse)
library(hrbrthemes)
library(viridis)
library(ggplot2)
data <- data.frame(
status = c("Solved", "Open", "Reopened", "Deleted", "Unassigned", "Escalated"),
percentage = c(rnorm(45.5, 39.5, 6.5, 2.6, 2.0, 3.9))
)
data %>%
ggplot(data, aes(x= status, y=percentage)) +
geom_segment(aes(x=status, xend=status, y=0, yend=percentage), size=1, color="blue", linetype="dotdash")+
geom_point()
library(tidyverse)
library(hrbrthemes)
library(viridis)
library(ggplot2)
data <- data.frame(
status = c("Solved", "Open", "Reopened", "Deleted", "Unassigned", "Escalated"),
percentage = c(rnorm(45.5, 39.5, 6.5, 2.6, 2.0, 3.9))
)
data %>%
ggplot(data, aes(x= status, y=percentage)) +
geom_segment(aes(x=status, xend=status, y=0, yend=percentage), size=1, color="blue", linetype="dotdash")+
geom_point()
library(tidyverse)
library(hrbrthemes)
library(viridis)
library(ggplot2)
data <- data.frame(
status = c("Solved", "Open", "Reopened", "Deleted", "Unassigned", "Escalated"),
percentage = c(rnorm(45.5, 39.5, 6.5, 2.6, 2.0, 3.9))
)
ggplot(data, aes(x= status, y=percentage)) +
geom_segment(aes(x=status, xend=status, y=0, yend=percentage), size=1, color="blue", linetype="dotdash")+
geom_point()
library(tidyverse)
library(hrbrthemes)
library(viridis)
library(ggplot2)
data <- data.frame(
status = c("Solved", "Open", "Reopened", "Deleted", "Unassigned", "Escalated"),
percentage = c(rnorm(45.5, 39.5, 6.5, 2.6, 2.0, 3.9))
)
ggplot(data, aes(x= status, y=percentage)) +
geom_segment(aes(x=status, xend=status, y=0, yend=percentage), size=0.5, color="blue", linetype="dotdash")+
geom_point()
library(tidyverse)
library(hrbrthemes)
library(viridis)
library(ggplot2)
data <- data.frame(
status = c("Solved", "Open", "Reopened", "Deleted", "Unassigned", "Escalated"),
percentage = c(rnorm(45.5, 39.5, 6.5, 2.6, 2.0, 3.9))
)
ggplot(data, aes(x= status, y=percentage)) +
geom_segment(aes(x=status, xend=status, y=0, yend=percentage), size=0.5, color="blue", linetype="dotdash")+
labs(title = 'Percentage of Ticket Status') +
geom_point()
library(ggplot2)
data <- data.frame(
status = c("Solved", "Open", "Reopened", "Deleted", "Unassigned", "Escalated"),
percentage = c(rnorm(45.5, 39.5, 6.5, 2.6, 2.0, 3.9))
)
ggplot(data, aes(x= status, y=percentage)) +
geom_segment(aes(x=status, xend=status, y=0, yend=percentage), size=0.5, color="blue", linetype="dotdash")+
labs(title = 'Percentage of Ticket Status') +
geom_point()
install.packages("Matrix")
install.packages("recommenderlab")
library()
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
install.packages("stringr")
install.packages("kableExtra")
install.packages("devtools")
install.packages("RNeo4j")
install.packages("psych")
install.packages("rstudioapi")
library(dplyr)
library(magrittr)
library(stringr)
library(tidyr)
library(knitr)
library(kableExtra)
library(ggplot2)
library(devtools)
# devtools::install_github("nicolewhite/RNeo4j")
library(RNeo4j)
library(recommenderlab)
library(psych)
library(rstudioapi)
# Create subdirectory in working directory to house Shiny app
dir <- getwd()
dir.app <- (file.path(dir, "App"))
if (!dir.exists(dir.app)){
dir.create(dir.app)
print(paste0("Shiny app directory created: ", dir.app))
} else {
print("Shiny app directory already exists")
}
# Read in the ratings dataframe and rename the columns
u1 <- "https://static.turi.com/datasets/millionsong/10000.txt"
df1 <- as.data.frame(read.table(u1, header = F, stringsAsFactors = F))
names(df1) <- c("user_id", "song_id", "listen_count")
# Read in the metadata dataframe
u2 <- "https://static.turi.com/datasets/millionsong/song_data.csv"
metadata <- as.data.frame(read.csv(u2, header = T, sep = ",", stringsAsFactors = F))
# Join data by song ID. Remove duplicate song ratings.
joined <- distinct(inner_join(df1, metadata, by = "song_id"))
# Group and summarize joined dataframe by user ID
grouped_id <- joined %>%
select(user_id, listen_count) %>%
group_by(user_id) %>%
summarise(number_songs = n(),
mean_listen_count = mean(listen_count),
sum_listen_count = sum(listen_count))
# Group and summarize joined dataframe by song
grouped_song <- joined %>%
select(song_id, title, artist_name) %>%
group_by(title)
# High-level statistics on listeners
describe(grouped_id) %>% kable()
# Compare total songs and listeners
ggplot(data = grouped_id, aes(number_songs)) +
geom_histogram(binwidth = 1) +
labs(title = "How people listen: songs vs. listeners", x = "Unique songs", y = "Total listeners")
# Compare total songs and listeners below 100 songs
ggplot(data = grouped_id, aes(number_songs)) +
geom_histogram(breaks = seq(1, 100, by = 1)) +
labs(title = "How people listen: songs vs. listeners", subtitle = "<100 songs (detail)", x = "Unique songs", y = "Total listeners")
# Compare total songs and total listens
ggplot(data = grouped_id, aes(x = number_songs, y = sum_listen_count)) +
geom_point() +
geom_smooth(method = "loess", se = F) +
xlim(c(0, 4000)) +
ylim(c(0, 4000)) +
labs(title = "How people listen: songs vs. listens", x = "Unique songs", y = "Total listens")
library(shiny); runApp('test.R')
runApp('test.R')
# Run the application
shinyApp(ui = ui, server = server)
shiny::runApp()
shiny::runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
song
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
song
song
song
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
song
song
song
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
song
recommend
getwd()
song
song <- read.csv(file = "top50.csv")
song
head(song)
str(song)
song
song
song
C:\Users\evang\Downloads\top50.csv
song <- read.csv(file = "top50.csv")
song
head(song)
str(song)
model
model <- randomForest(track ~ ., data=song, nsongs = 50, mtry = 4, importance = TRUE)
model
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
artist <- artist%<%song
artist <- artist$song
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
nnj
shiny::runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
shiny::runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
shiny::runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
shiny::runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
shiny::runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
numOfSongs <- reactive({
music %<%
filter(artist == input$artist)%>%
count(title) %>%
group_by(year)
})
numOfSongs <- reactive({
music %<%
filter(artist == input$artist)%>%
count(title) %>%
group_by(year)
})
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
shiny::runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
shiny::runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
shiny::runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
install.packages("thematic")
install.packages("thematic")
install.packages("thematic")
shiny::runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
shiny::runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
shiny::runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
shiny::runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
shiny::runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
shiny::runApp('C:/Users/evang/OneDrive/Desktop/Testfile')
